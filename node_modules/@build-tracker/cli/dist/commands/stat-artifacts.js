"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../modules/config"));
var glob_1 = __importDefault(require("glob"));
var path_1 = __importDefault(require("path"));
var readfile_1 = __importDefault(require("../modules/readfile"));
exports.command = 'stat-artifacts';
exports.description = 'Compute your artifact stats';
var group = 'Stat artifacts';
var defaultNameMapper = function (fileName) { return fileName; };
exports.builder = function (yargs) {
    return yargs
        .usage("Usage: $0 " + exports.command)
        .option('config', {
        alias: 'c',
        description: 'Override path to the build-tracker CLI config file',
        group: group,
        normalize: true
    })
        .option('out', {
        alias: 'o',
        default: true,
        description: 'Write the stats to stdout',
        group: group,
        type: 'boolean'
    });
};
exports.handler = function (args) { return __awaiter(_this, void 0, void 0, function () {
    var _a, artifactGlobs, baseDir, cwd, getFilenameHash, _b, nameMapper, artifacts, fileOut;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, config_1.default(args.config)];
            case 1:
                _a = _c.sent(), artifactGlobs = _a.artifacts, baseDir = _a.baseDir, cwd = _a.cwd, getFilenameHash = _a.getFilenameHash, _b = _a.nameMapper, nameMapper = _b === void 0 ? defaultNameMapper : _b;
                artifacts = new Map();
                artifactGlobs.forEach(function (fileGlob) {
                    glob_1.default.sync(path_1.default.resolve(cwd, fileGlob)).forEach(function (filePath) {
                        var sizes = readfile_1.default(filePath, getFilenameHash);
                        artifacts.set(nameMapper(path_1.default.relative(baseDir, filePath).replace("." + sizes.hash, '')), sizes);
                    });
                }, []);
                if (args.out) {
                    fileOut = Array.from(artifacts).reduce(function (memo, _a) {
                        var artifactName = _a[0], stat = _a[1];
                        memo[artifactName] = stat;
                        return memo;
                    }, {});
                    // @ts-ignore
                    process.stdout.write(JSON.stringify(fileOut, null, 2));
                }
                return [2 /*return*/, Promise.resolve({
                        artifacts: artifacts
                    })];
        }
    });
}); };
//# sourceMappingURL=stat-artifacts.js.map