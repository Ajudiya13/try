"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var Git = __importStar(require("../modules/git"));
var config_1 = __importDefault(require("../modules/config"));
var stat_artifacts_1 = require("./stat-artifacts");
exports.command = 'create-build';
exports.description = 'Construct a build for the current commit';
var group = 'Create a build';
exports.builder = function (yargs) {
    return yargs
        .usage("Usage: $0 " + exports.command)
        .option('config', {
        alias: 'c',
        description: 'Override path to the build-tracker CLI config file',
        group: group,
        normalize: true
    })
        .option('out', {
        alias: 'o',
        default: true,
        description: 'Write the build to stdout',
        group: group,
        type: 'boolean'
    })
        .option('skip-dirty-check', {
        default: false,
        description: 'Skip the git work tree state check',
        group: group,
        type: 'boolean'
    });
};
exports.handler = function (args) { return __awaiter(_this, void 0, void 0, function () {
    var config, isDirty, artifactStats, artifacts, defaultBranch, parentRevision, revision, _a, timestamp, name, subject, branch, build;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, config_1.default(args.config)];
            case 1:
                config = _b.sent();
                if (!!args['skip-dirty-check']) return [3 /*break*/, 3];
                return [4 /*yield*/, Git.isDirty(config.cwd)];
            case 2:
                isDirty = _b.sent();
                if (isDirty) {
                    throw new Error('Current work tree is dirty. Please commit all changes before proceeding');
                }
                _b.label = 3;
            case 3: return [4 /*yield*/, stat_artifacts_1.handler({ config: args.config, out: false })];
            case 4:
                artifactStats = (_b.sent()).artifacts;
                artifacts = Array.from(artifactStats).reduce(function (memo, _a) {
                    var artifactName = _a[0], stat = _a[1];
                    memo.push({
                        name: artifactName,
                        hash: stat.hash,
                        sizes: {
                            stat: stat.stat,
                            gzip: stat.gzip,
                            brotli: stat.brotli
                        }
                    });
                    return memo;
                }, []);
                return [4 /*yield*/, Git.getDefaultBranch(config.cwd)];
            case 5:
                defaultBranch = _b.sent();
                return [4 /*yield*/, Git.getParentRevision(defaultBranch, config.cwd)];
            case 6:
                parentRevision = _b.sent();
                return [4 /*yield*/, Git.getCurrentRevision(config.cwd)];
            case 7:
                revision = _b.sent();
                return [4 /*yield*/, Git.getRevisionDetails(revision, config.cwd)];
            case 8:
                _a = _b.sent(), timestamp = _a.timestamp, name = _a.name, subject = _a.subject;
                return [4 /*yield*/, Git.getBranch(config.cwd)];
            case 9:
                branch = _b.sent();
                build = {
                    meta: {
                        author: name,
                        branch: branch,
                        parentRevision: parentRevision,
                        revision: revision,
                        subject: subject,
                        timestamp: timestamp
                    },
                    artifacts: artifacts
                };
                if (args.out) {
                    process.stdout.write(JSON.stringify(build, null, 2));
                }
                return [2 /*return*/, Promise.resolve(build)];
        }
    });
}); };
//# sourceMappingURL=create-build.js.map