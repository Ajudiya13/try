"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var types_1 = require("@build-tracker/types");
/**
 * The kibibyte is a multiple of the unit byte for quantities of digital information.
 * KB is 1000 bytes, but we're accustomed to seeing KB as 1024. That unit is actually KiB
 * @type {Number}
 */
var BYTES_IN_KIBIBYTE = 1024;
var KIB_UNIT_STRING = 'KiB';
var defaultByteFormatting = function (bytes, units) {
    return Math.round((bytes / units) * 100) / 100;
};
function formatBytes(bytes, options) {
    if (options === void 0) { options = {}; }
    var _a = options.units, units = _a === void 0 ? BYTES_IN_KIBIBYTE : _a, _b = options.unitString, unitString = _b === void 0 ? KIB_UNIT_STRING : _b, _c = options.formatter, formatter = _c === void 0 ? defaultByteFormatting : _c;
    return formatter(bytes, units).toLocaleString() + " " + unitString;
}
exports.formatBytes = formatBytes;
function formatSha(sha) {
    return sha.slice(0, 7);
}
exports.formatSha = formatSha;
function formatPercent(value) {
    return (value * 100).toFixed(3) + "%";
}
var levelToString = (_a = {},
    _a[types_1.BudgetLevel.WARN] = 'Warning',
    _a[types_1.BudgetLevel.ERROR] = 'Error',
    _a);
function formatBudgetResult(budgetResult, itemName) {
    var actual = budgetResult.actual, expected = budgetResult.expected, level = budgetResult.level, type = budgetResult.type;
    var actualFormatted = type === types_1.BudgetType.PERCENT_DELTA ? formatPercent(actual) : formatBytes(actual);
    var expectedFormatted = type === types_1.BudgetType.PERCENT_DELTA ? formatPercent(expected) : formatBytes(expected);
    var diffFormatted = type === types_1.BudgetType.PERCENT_DELTA ? formatPercent(actual - expected) : formatBytes(actual - expected);
    var prefix = levelToString[level] + ": \"" + itemName + "\"";
    switch (type) {
        case types_1.BudgetType.DELTA:
            return prefix + " failed budget delta limit. Expected to increase no more than " + expectedFormatted + ", but increased by " + actualFormatted;
        case types_1.BudgetType.PERCENT_DELTA:
            return prefix + " failed budget percent change limit. Expected no increase by no more than " + expectedFormatted + ", but increased by " + actualFormatted;
        case types_1.BudgetType.SIZE:
            return prefix + " failed budget size limit of " + expectedFormatted + " by " + diffFormatted;
    }
}
exports.formatBudgetResult = formatBudgetResult;
//# sourceMappingURL=index.js.map