"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var build_1 = __importDefault(require("@build-tracker/build"));
var comparator_1 = __importDefault(require("@build-tracker/comparator"));
var api_errors_1 = require("@build-tracker/api-errors");
exports.insertBuild = function (queries, config, onInserted) {
    if (onInserted === void 0) { onInserted = function () { return Promise.resolve(); }; }
    return function (req, res) {
        var _a = req.body, artifacts = _a.artifacts, meta = _a.meta;
        var _b = config.artifacts, artifactConfig = _b === void 0 ? {} : _b;
        var build = new build_1.default(meta, artifacts);
        queries.insert(build).then(function () {
            return queries
                .byRevision(build.getMetaValue('parentRevision'))
                .then(function (parentBuildData) {
                var parentBuild = new build_1.default(parentBuildData.meta, parentBuildData.artifacts);
                return {
                    comparator: new comparator_1.default({
                        artifactBudgets: artifactConfig.budgets,
                        artifactFilters: artifactConfig.filters,
                        builds: [build, parentBuild]
                    }),
                    parentBuild: parentBuild
                };
            })
                .then(function (context) {
                return onInserted(context.comparator).then(function () { return context; });
            })
                .then(function (_a) {
                var comparator = _a.comparator, parentBuild = _a.parentBuild;
                res.send({
                    build: build.toJSON(),
                    parentBuild: parentBuild.toJSON(),
                    json: comparator.toJSON(),
                    markdown: comparator.toMarkdown(),
                    csv: comparator.toCsv()
                });
            })
                .catch(function (error) {
                if (error instanceof api_errors_1.NotFoundError) {
                    res.send({ error: error });
                    return;
                }
                res.send({ error: error });
            });
        });
    };
};
//# sourceMappingURL=insert.js.map