"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var api_1 = __importDefault(require("./api"));
var body_parser_1 = __importDefault(require("body-parser"));
var crypto_1 = __importDefault(require("crypto"));
var express_pino_logger_1 = __importDefault(require("express-pino-logger"));
var csp_1 = __importDefault(require("./csp"));
var helmet_1 = __importDefault(require("helmet"));
var path_1 = __importDefault(require("path"));
var pino_1 = __importDefault(require("pino"));
var express_1 = __importDefault(require("express"));
var app = express_1.default();
var logger = pino_1.default();
var reqLogger = express_pino_logger_1.default({ logger: logger });
exports.nonce = function (_req, res, next) {
    res.locals.nonce = crypto_1.default.randomBytes(16).toString('base64');
    next();
};
exports.props = function (config, url) { return function (_req, res, next) {
    res.locals.props = {
        url: url,
        artifactConfig: config.artifacts
    };
    next();
}; };
function runBuildTracker(config) {
    var handlers = config.handlers, _a = config.port, port = _a === void 0 ? 3000 : _a, url = config.url, appConfig = __rest(config, ["handlers", "port", "url"]);
    var IN_DEV = process.env.NODE_ENV !== 'production' && config.dev;
    app.use(reqLogger);
    app.use(body_parser_1.default.json());
    app.use(api_1.default(express_1.default.Router(), config, handlers));
    app.use(exports.nonce);
    app.use(exports.props(appConfig, url));
    app.use(helmet_1.default.contentSecurityPolicy({ directives: csp_1.default(IN_DEV) }));
    var APP_ROOT = path_1.default.dirname(require.resolve('@build-tracker/app'));
    if (IN_DEV) {
        var middleware = require('webpack-dev-middleware');
        var webpack = require('webpack');
        var compiler = webpack(require(path_1.default.join(APP_ROOT, 'config/webpack.config'))({ port: port }));
        app.use(middleware(compiler, { noInfo: true, publicPath: '/', serverSideRender: true }));
        app.use(require('webpack-hot-middleware')(compiler.compilers.find(function (compiler) { return compiler.name === 'client'; })));
        app.use(require('webpack-hot-server-middleware')(compiler));
    }
    else {
        var serverRenderer = require(path_1.default.join(APP_ROOT, 'dist/server/main')).default;
        var stats = require(path_1.default.join(APP_ROOT, 'dist/stats.json'));
        app.use(express_1.default.static(path_1.default.join(APP_ROOT, 'dist')));
        app.use(serverRenderer(stats));
    }
    app.listen(port);
    logger.info("Build Tracker server running on port " + port);
    return app;
}
exports.default = runBuildTracker;
//# sourceMappingURL=server.js.map