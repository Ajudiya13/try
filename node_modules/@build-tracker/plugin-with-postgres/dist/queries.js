"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var build_1 = __importDefault(require("@build-tracker/build"));
var api_errors_1 = require("@build-tracker/api-errors");
var Queries = /** @class */ (function () {
    function Queries(pool) {
        var _this = this;
        this.getByRevision = function (revision) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._pool.query('SELECT meta, artifacts FROM builds WHERE revision = $1', [revision])];
                    case 1:
                        res = _a.sent();
                        if (res.rowCount !== 1) {
                            throw new api_errors_1.NotFoundError();
                        }
                        return [2 /*return*/, Promise.resolve(res.rows[0])];
                }
            });
        }); };
        this.insert = function (_a) {
            var meta = _a.meta, artifacts = _a.artifacts;
            return __awaiter(_this, void 0, void 0, function () {
                var build, res;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            build = new build_1.default(meta, artifacts);
                            return [4 /*yield*/, this._pool.query('INSERT INTO builds (branch, revision, timestamp, parentRevision, meta, artifacts) VALUES ($1, $2, $3, $4, $5, $6)', [
                                    build.getMetaValue('branch'),
                                    build.getMetaValue('revision'),
                                    build.meta.timestamp,
                                    build.getMetaValue('parentRevision'),
                                    JSON.stringify(build.meta),
                                    JSON.stringify(build.artifacts)
                                ])];
                        case 1:
                            res = _b.sent();
                            if (res.rowCount !== 1) {
                                throw new Error('Unable to insert build');
                            }
                            return [2 /*return*/, Promise.resolve(build.getMetaValue('revision'))];
                    }
                });
            });
        };
        this.getByRevisions = function () {
            var revisions = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                revisions[_i] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._pool.query('SELECT meta, artifacts FROM builds WHERE revision in $1', [revisions])];
                        case 1:
                            res = _a.sent();
                            if (res.rowCount === 0) {
                                throw new api_errors_1.NotFoundError();
                            }
                            return [2 /*return*/, Promise.resolve(res.rows)];
                    }
                });
            });
        };
        this.getByRevisionRange = function (startRevision, endRevision) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new api_errors_1.UnimplementedError("revision range " + startRevision + " - " + endRevision);
            });
        }); };
        this.getByTimeRange = function (startTimestamp, endTimestamp, branch) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._pool.query('SELECT meta, artifacts FROM builds WHERE timestamp >= $1 AND timestamp <= $2 AND branch = $3 ORDER BY timestamp', [startTimestamp, endTimestamp, branch])];
                    case 1:
                        res = _a.sent();
                        if (res.rowCount === 0) {
                            throw new api_errors_1.NotFoundError();
                        }
                        return [2 /*return*/, Promise.resolve(res.rows)];
                }
            });
        }); };
        this.getRecent = function (limit, branch) {
            if (limit === void 0) { limit = 20; }
            return __awaiter(_this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._pool.query('SELECT meta, artifacts FROM builds WHERE branch = $1 ORDER BY timestamp LIMIT $2', [branch, limit])];
                        case 1:
                            res = _a.sent();
                            if (res.rowCount === 0) {
                                throw new api_errors_1.NotFoundError();
                            }
                            return [2 /*return*/, Promise.resolve(res.rows)];
                    }
                });
            });
        };
        this._pool = pool;
    }
    return Queries;
}());
exports.default = Queries;
//# sourceMappingURL=queries.js.map