"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BuildDelta_1 = __importDefault(require("./BuildDelta"));
var markdown_table_1 = __importDefault(require("markdown-table"));
var formatting_1 = require("@build-tracker/formatting");
var CellType;
(function (CellType) {
    CellType["TEXT"] = "text";
    CellType["DELTA"] = "delta";
    CellType["TOTAL"] = "total";
    CellType["TOTAL_DELTA"] = "totalDelta";
    CellType["REVISION"] = "revision";
    CellType["REVISION_DELTA"] = "revisionDelta";
    CellType["ARTIFACT"] = "artifact";
    CellType["GROUP"] = "group";
})(CellType = exports.CellType || (exports.CellType = {}));
var emptyObject = Object.freeze({});
/* eslint-disable @typescript-eslint/no-explicit-any */
var flatten = function (arrays) { return arrays.reduce(function (memo, b) { return memo.concat(b); }, []); };
/* eslint-enable @typescript-eslint/no-explicit-any */
var defaultFormatRevision = function (cell) { return formatting_1.formatSha(cell.revision); };
var defaultFormatRevisionDelta = function (cell) { return "\u0394" + cell.deltaIndex; };
var defaultFormatTotal = function (cell, sizeKey) { return formatting_1.formatBytes(cell.sizes[sizeKey] || 0); };
var defaultFormatDelta = function (cell, sizeKey) {
    return formatting_1.formatBytes(cell.sizes[sizeKey] || 0) + " (" + ((cell.percents[sizeKey] || 0) * 100).toFixed(1) + "%)";
};
var defaultArtifactFilter = function () { return true; };
var BuildComparator = /** @class */ (function () {
    function BuildComparator(_a) {
        var artifactBudgets = _a.artifactBudgets, artifactFilters = _a.artifactFilters, builds = _a.builds, groups = _a.groups;
        this.builds = builds;
        this._artifactFilters = artifactFilters || [];
        this._artifactBudgets = artifactBudgets || emptyObject;
        this._groups = [{ name: 'All', artifactNames: this.artifactNames }].concat(groups).filter(Boolean);
        this._emptySizes = Object.freeze(this.sizeKeys.reduce(function (memo, key) {
            memo[key] = 0;
            return memo;
        }, {}));
    }
    Object.defineProperty(BuildComparator.prototype, "artifactNames", {
        get: function () {
            var _this = this;
            if (this.builds.length === 0) {
                return [];
            }
            if (!this._artifactNames) {
                this._artifactNames = Array.prototype.concat
                    .apply([], this.builds.map(function (build) { return build.artifacts; }))
                    .sort(function (a, b) {
                    var sizeKey = Object.keys(a.sizes)[0];
                    return b.sizes[sizeKey] - a.sizes[sizeKey];
                })
                    .map(function (artifact) { return artifact.name; })
                    .filter(function (value, index, self) {
                    return self.indexOf(value) === index && !_this._artifactFilters.some(function (filter) { return filter.test(value); });
                });
            }
            return this._artifactNames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildComparator.prototype, "sizeKeys", {
        get: function () {
            if (this.builds.length === 0 || this.artifactNames.length === 0) {
                return [];
            }
            if (!this._sizeKeys) {
                this._sizeKeys = Object.keys(this.builds[0].artifacts[0].sizes).sort();
                var allSizeKeys_1 = new Set();
                this.builds.forEach(function (build) {
                    build.artifacts.forEach(function (artifact) {
                        Object.keys(artifact.sizes).forEach(function (key) {
                            allSizeKeys_1.add(key);
                        });
                    });
                });
                if (allSizeKeys_1.size !== this._sizeKeys.length || !this._sizeKeys.every(function (key) { return allSizeKeys_1.has(key); })) {
                    throw new Error('builds provided do not have same size keys for artifacts');
                }
            }
            return this._sizeKeys;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildComparator.prototype, "buildDeltas", {
        get: function () {
            var _this = this;
            if (this.builds.length === 0) {
                return [];
            }
            if (!this._buildDeltas) {
                this._buildDeltas = this.builds.map(function (baseBuild, i) {
                    return _this.builds.slice(0, i).map(function (prevBuild) {
                        return new BuildDelta_1.default(baseBuild, prevBuild, {
                            artifactBudgets: _this._artifactBudgets,
                            artifactFilters: _this._artifactFilters,
                            groups: _this._groups
                        });
                    });
                });
            }
            return this._buildDeltas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildComparator.prototype, "matrixHeader", {
        get: function () {
            var _this = this;
            if (!this._matrixHeader) {
                this._matrixHeader = [
                    { type: CellType.TEXT, text: '' }
                ].concat(flatten(this.buildDeltas.map(function (buildDeltas, buildIndex) {
                    var revision = _this.builds[buildIndex].getMetaValue('revision');
                    return [
                        { type: CellType.REVISION, revision: revision }
                    ].concat(buildDeltas.map(function (buildDelta, deltaIndex) { return ({
                        type: CellType.REVISION_DELTA,
                        deltaIndex: deltaIndex + 1,
                        againstRevision: buildDelta.prevBuild.getMetaValue('revision'),
                        revision: revision
                    }); }));
                })));
            }
            return this._matrixHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildComparator.prototype, "matrixGroups", {
        get: function () {
            var _this = this;
            if (!this._matrixGroups) {
                this._matrixGroups = this._groups.map(function (group) { return _this._getGroupRow(group); });
            }
            return this._matrixGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildComparator.prototype, "matrixArtifacts", {
        get: function () {
            var _this = this;
            if (!this._matrixArtifacts) {
                this._matrixArtifacts = this.artifactNames.map(function (artifactName) { return _this._getArtifactRow(artifactName); });
            }
            return this._matrixArtifacts;
        },
        enumerable: true,
        configurable: true
    });
    BuildComparator.prototype._getArtifactRow = function (artifactName) {
        var _this = this;
        var cells = this.buildDeltas.map(function (buildDeltas, i) {
            var artifact = _this.builds[i].getArtifact(artifactName);
            return [
                {
                    sizes: artifact ? artifact.sizes : _this._emptySizes,
                    name: artifactName,
                    type: CellType.TOTAL
                }
            ].concat(buildDeltas.map(function (buildDelta) { return (__assign({}, buildDelta.getArtifactDelta(artifactName).toObject(), { type: CellType.DELTA })); }));
        });
        return [{ type: CellType.ARTIFACT, text: artifactName }].concat(flatten(cells));
    };
    BuildComparator.prototype._getGroupRow = function (group) {
        var _this = this;
        var artifactNames = group.artifactNames ? group.artifactNames.slice().filter(Boolean) : [];
        if (group.artifactMatch) {
            artifactNames = artifactNames.concat(this.artifactNames.filter(function (name) { return group.artifactMatch.test(name); }));
        }
        var cells = this.buildDeltas.map(function (buildDeltas, i) {
            var groupSizes = _this.builds[i].getSum(artifactNames);
            return [
                {
                    sizes: groupSizes,
                    name: group.name,
                    type: CellType.TOTAL
                }
            ].concat(buildDeltas.map(function (buildDelta) { return (__assign({}, buildDelta.getGroupDelta(group.name).toObject(), { type: CellType.TOTAL_DELTA })); }));
        });
        return [{ type: CellType.GROUP, text: group.name, artifactNames: artifactNames }].concat(flatten(cells));
    };
    BuildComparator.prototype.getStringFormattedHeader = function (formatRevision, formatRevisionDelta) {
        if (formatRevision === void 0) { formatRevision = defaultFormatRevision; }
        if (formatRevisionDelta === void 0) { formatRevisionDelta = defaultFormatRevisionDelta; }
        return this.matrixHeader.map(function (cell) {
            switch (cell.type) {
                case CellType.REVISION:
                    return formatRevision(cell);
                case CellType.REVISION_DELTA:
                    return formatRevisionDelta(cell);
                case CellType.TEXT:
                    return cell.text;
            }
        });
    };
    BuildComparator.prototype.getStringFormattedGroups = function (formatTotal, formatDelta, sizeKey) {
        if (formatTotal === void 0) { formatTotal = defaultFormatTotal; }
        if (formatDelta === void 0) { formatDelta = defaultFormatDelta; }
        if (sizeKey === void 0) { sizeKey = 'gzip'; }
        return this.matrixGroups.map(function (row) {
            return row.map(function (cell) {
                switch (cell.type) {
                    case CellType.GROUP:
                        return cell.text;
                    case CellType.TOTAL_DELTA:
                        return formatDelta(cell, sizeKey);
                    case CellType.TOTAL:
                        return formatTotal(cell, sizeKey);
                }
            });
        });
    };
    BuildComparator.prototype.getStringFormattedRows = function (formatTotal, formatDelta, sizeKey, artifactFilter) {
        if (formatTotal === void 0) { formatTotal = defaultFormatTotal; }
        if (formatDelta === void 0) { formatDelta = defaultFormatDelta; }
        if (sizeKey === void 0) { sizeKey = 'gzip'; }
        if (artifactFilter === void 0) { artifactFilter = defaultArtifactFilter; }
        return this.matrixArtifacts.filter(artifactFilter).map(function (row) {
            return row.map(function (cell) {
                switch (cell.type) {
                    case CellType.ARTIFACT:
                        return cell.text;
                    case CellType.DELTA:
                        return formatDelta(cell, sizeKey);
                    case CellType.TOTAL:
                        return formatTotal(cell, sizeKey);
                }
            });
        });
    };
    BuildComparator.prototype.toJSON = function () {
        return {
            header: this.matrixHeader,
            groups: this.matrixGroups,
            artifacts: this.matrixArtifacts
        };
    };
    BuildComparator.prototype.toMarkdown = function (_a) {
        var _b = _a === void 0 ? {} : _a, formatRevision = _b.formatRevision, formatRevisionDelta = _b.formatRevisionDelta, formatTotal = _b.formatTotal, formatDelta = _b.formatDelta, artifactFilter = _b.artifactFilter, sizeKey = _b.sizeKey;
        var header = this.getStringFormattedHeader(formatRevision, formatRevisionDelta);
        var groups = this.getStringFormattedGroups(formatTotal, formatDelta, sizeKey);
        var rows = this.getStringFormattedRows(formatTotal, formatDelta, sizeKey, artifactFilter);
        return markdown_table_1.default([header].concat(groups, rows), { align: rows[0].map(function (_, i) { return (i === 0 ? 'l' : 'r'); }) });
    };
    BuildComparator.prototype.toCsv = function (_a) {
        var _b = _a === void 0 ? {} : _a, formatRevision = _b.formatRevision, formatRevisionDelta = _b.formatRevisionDelta, formatTotal = _b.formatTotal, formatDelta = _b.formatDelta, artifactFilter = _b.artifactFilter, sizeKey = _b.sizeKey;
        var header = this.getStringFormattedHeader(formatRevision, formatRevisionDelta);
        var groups = this.getStringFormattedGroups(formatTotal, formatDelta, sizeKey);
        var rows = this.getStringFormattedRows(formatTotal, formatDelta, sizeKey, artifactFilter);
        return [header].concat(groups, rows).map(function (row) { return "" + row.join(','); }).join("\r\n");
    };
    return BuildComparator;
}());
exports.default = BuildComparator;
//# sourceMappingURL=index.js.map